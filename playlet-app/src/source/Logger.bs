namespace Logger

    ' Put the file at the root directry to avoid needing to create a folder
    const LOGS_FILE_PATH = "cachefs:/playlet_startup_logs.txt"

    function Init()
        DeleteFile(LOGS_FILE_PATH)
    end function

    function Log(msg as string)
        msg = "[APP] " + msg
        print msg

        buffer = CreateObject("roByteArray")
        buffer.FromAsciiString(msg + `\n`)
        buffer.AppendFile(LOGS_FILE_PATH)
    end function

    function LogLastExitInfo() as void
        ' roAppManager.GetLastExitInfo() is only available on Roku OS 13 and above
        appManager = CreateObject("roAppManager")
        hasMethod = FindMemberFunction(appManager, "GetLastExitInfo") <> invalid
        if not hasMethod
            return
        end if

        lastExitInfo = appManager.GetLastExitInfo()
        if lastExitInfo = invalid
            return
        end if

        msg = `************ Last Exit Info ************\n`
        msg += `exit_code: ${lastExitInfo.exit_code}\n`
        msg += `timestamp: ${lastExitInfo.timestamp}\n`
        msg += `app_state: ${lastExitInfo.app_state}\n`
        msg += `media_player_state: ${lastExitInfo.media_player_state}\n`
        msg += `mem_limit: ${lastExitInfo.mem_limit}\n`

        ' Sometimes lastExitInfo.console_log would contain 'AppExitComplete', which
        ' is used to detect test runner exits. So we don't log it in test mode.
        #if TEST_MODE
        #else
            msg += `console_log:\n${lastExitInfo.console_log}\n`
        #end if

        msg += `********** End Last Exit Info **********\n`

        print msg

        buffer = CreateObject("roByteArray")
        buffer.FromAsciiString(msg + `\n`)
        buffer.AppendFile(LOGS_FILE_PATH)
    end function
end namespace
