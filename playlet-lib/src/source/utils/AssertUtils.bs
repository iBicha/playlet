import "pkg:/source/utils/Logging.bs"
import "pkg:/source/utils/Types.bs"

namespace Assert

    function IsTrue(condition as dynamic, message = invalid as dynamic) as void
        if not ValidBool(condition)
            throw "Assertion failed: " + ToString(message)
        end if
    end function

    function IsFalse(condition as dynamic, message = invalid as dynamic) as void
        if ValidBool(condition)
            throw "Assertion failed: " + ToString(message)
        end if
    end function

    function IsValid(value as dynamic, message = invalid as dynamic) as void
        if value = invalid
            throw "Assertion failed: " + ToString(message)
        end if
    end function

    function AreEqual(expected as dynamic, actual as dynamic, message = invalid as dynamic) as void
        if expected <> actual
            throw "Assertion failed: Expected " + ToString(expected) + ", but got " + ToString(actual) + ". " + ToString(message)
        end if
    end function

end namespace
