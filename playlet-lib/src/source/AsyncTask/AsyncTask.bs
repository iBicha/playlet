import "pkg:/source/utils/Types.bs"

namespace AsyncTask

    function Start(taskName as string, input as object, callback = invalid as object) as object
        task = Create(taskName, input, callback)
        task.control = "RUN"
        return task
    end function

    function Create(taskName as string, input as object, callback = invalid as object) as object
        id = StrI(rnd(2147483647), 36)
        task = createObject("roSGNode", taskName)
        task.id = id
        task.input = input

        m[`asynctask_${id}`] = task
        m[`asynctask_${id}_callback`] = callback
        task.ObserveFieldScoped("state", FuncName(internal_OnTaskState))

        return task
    end function

    function internal_OnTaskState(e as object) as void
        task = e.getRoSGNode()
        if task.state = "init" or task.state = "run"
            return
        end if

        task.UnobserveFieldScoped("state")

        id = task.id
        output = task.output
        ' if output is invalid, it means the task was interrupted before the result is ready
        if output <> invalid
            callback = m[`asynctask_${id}_callback`]
            if callback <> invalid
                callback(output)
            end if
        end if

        task.input = invalid
        task.output = invalid
        m.delete(`asynctask_${id}`)
        m.delete(`asynctask_${id}_callback`)
    end function

end namespace
