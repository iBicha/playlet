import "pkg:/source/services/HttpClient.bs"

const SENTRY_ENVELOPE_URL = "https://playlet-v8556.ondigitalocean.app/envelope"

const SUPPORTS_ATTACHMENTS = false

namespace Sentry

    function SendEvents(events as object) as integer
        timestamp = CreateObject("roDateTime").ToISOString()

        payload = FormatJson({
            sent_at: timestamp
            sdk: {
                name: "sentry.roku.playlet"
                version: "1.0.0"
            }
        }) + `\n`

        for each event in events
            payload += `{"type":"event"}` + `\n`

            if StringUtils.IsNullOrEmpty(event.event_id)
                event.event_id = GenerateEventId()
            end if

            if StringUtils.IsNullOrEmpty(event.timestamp)
                event.timestamp = timestamp
            end if

            eventPayload = {
                event_id: event.event_id
                timestamp: event.timestamp
                platform: "roku"
                #if DEBUG
                    environment: "development"
                #else
                    environment: "production"
                #end if
                release: event.release
                tags: event.tags
                level: event.level
                user: {
                    id: event.userId
                }
            }

            message = event.message

            if event.fingerprint = invalid
                event.fingerprint = GetFingerprint(message)
            end if

            if event.fingerprint <> invalid
                fingerprint = event.fingerprint
                if not IsArray(fingerprint)
                    fingerprint = [fingerprint]
                end if
                for i = 0 to fingerprint.Count() - 1
                    if not IsString(fingerprint[i])
                        fingerprint[i] = ToString(fingerprint[i])
                    end if
                end for
                eventPayload.fingerprint = fingerprint
            end if

            hasAttachments = IsArray(event.attachments) and event.attachments.Count() > 0

            if (not SUPPORTS_ATTACHMENTS) and hasAttachments
                message += `\nAttachments: (${event.attachments.Count()} files)`
                for each attachment in event.attachments
                    message += `\nAttachment: ${attachment.filename} (${attachment.content_type})\n${attachment.data}`
                end for
                message += `\nEnd of attachments.`
            end if

            eventPayload.logentry = {
                formatted: message
            }

            payload += FormatJson(eventPayload) + `\n`

            if SUPPORTS_ATTACHMENTS and hasAttachments
                tmpBuffer = CreateObject("roByteArray")
                for each attachment in event.attachments
                    data = attachment.data
                    attachment.Delete("data")
                    attachment["type"] = "attachment"
                    tmpBuffer.FromAsciiString(data)
                    attachment["length"] = tmpBuffer.Count()

                    payload += FormatJson(attachment) + `\n`
                    payload += data + `\n`
                end for
            end if
        end for

        request = HttpClient.Post(SENTRY_ENVELOPE_URL, payload)
        request.Header("Content-Type", "application/x-sentry-envelope")
        response = request.Await()
        if not response.IsSuccess()
            #if DEBUG
                LogErrorNoTelemetry("Failed to send event to Sentry:", response.ErrorMessage(), `\nHeaders:`, response.Headers())
            #end if

            retryAfter = ValidString(response.Headers()["Retry-After"]).ToInt()
            LogErrorNoTelemetry("Rate limited by Sentry. Retry after", retryAfter, "seconds")
            if retryAfter = 0
                retryAfter = 60
            end if
            return retryAfter
        end if

        LogDebug("Sent events to Sentry. Response:", response.Text())
        return 0
    end function

    function GenerateEventId() as string
        hexChars = "0123456789abcdef"
        eventId = ""
        for i = 0 to 31
            eventId = eventId + hexChars.Mid(rnd(16) - 1, 1)
        end for
        return eventId
    end function

    function GetFingerprint(message as dynamic) as dynamic
        if StringUtils.IsNullOrEmpty(message)
            return invalid
        end if
        fingerprint = ReplaceRequestId(message)
        if fingerprint = invalid
            return invalid
        end if
        return [fingerprint]
    end function

    function ReplaceRequestId(message as string) as string
        reqIdStart = `\nRequestId: `
        requestIdIndex = message.InStr(reqIdStart)
        if requestIdIndex = -1
            return invalid
        end if

        newLineIndex = message.InStr(requestIdIndex + reqIdStart.Len(), `\n`)
        if newLineIndex = -1
            return invalid
        end if

        reqIdStartIndex = requestIdIndex + reqIdStart.Len()
        reqIdEndIndex = newLineIndex - 1
        if (reqIdEndIndex <= reqIdStartIndex) or ((reqIdEndIndex - reqIdStartIndex) > 20)
            return invalid
        end if

        ' replace request id with <REQUEST_ID>
        fingerprint = message.Mid(0, reqIdStartIndex) + "<REQUEST_ID>" + message.Mid(reqIdEndIndex + 1)
        return fingerprint
    end function
end namespace
