import "pkg:/components/Services/Innertube/Context.bs"
import "pkg:/components/Services/Innertube/Parser.bs"
import "pkg:/components/Services/Innertube/protos/params.proto.gen.bs"
import "pkg:/source/services/HttpClient.bs"
import "pkg:/source/utils/Logging.bs"
import "pkg:/source/utils/ObjectUtils.bs"
import "pkg:/source/utils/Types.bs"

namespace Innertube

    function CreateNextRequest(payloadArgs as object, credentialTransferToken as string) as object
        deviceInfo = CreateObject("roDeviceInfo")

        context = Innertube.CreateContext(Innertube.ClientType.Web, deviceInfo, {
            "credentialTransferToken": credentialTransferToken
        })

        payload = {
            "context": context
        }
        payload.Append(payloadArgs)

        request = HttpClient.PostJson("https://www.youtube.com/youtubei/v1/next?prettyPrint=false&alt=json", payload)
        headers = {
            "accept": "*/*"
            "accept-language": "*"
        }
        headers.Append(Innertube.CreateHeaders(Innertube.ClientType.Web))
        request.Headers(headers)

        return request
    end function

    function GetEncodedNextParams(videoIds as object) as string
        if not IsArray(videoIds) or videoIds.Count() = 0
            return ""
        end if

        return Protobuf.Generated.misc.encodeNextParams({
            "video_id": videoIds
        })
    end function

    function ParseInnertubeNextResponse(payload as object, parsedResponse as object) as object
        if parsedResponse.error <> invalid
            LogWarn("Invalid parsed response", parsedResponse)
            return parsedResponse
        end if

        if not IsArray(parsedResponse.recommendedVideos)
            LogWarn("Invalid recommended videos", parsedResponse.recommendedVideos)
            return parsedResponse
        end if

        if not IsAssociativeArray(payload)
            LogWarn("Invalid payload", payload)
            return parsedResponse
        end if

        endscreen = ObjectUtils.Dig(payload, ["playerOverlays", "playerOverlayRenderer", "endScreen"])

        feeds = Innertube.ParseResponseDataForFeeds(endscreen, { noContainers: true })
        if feeds.Count() > 0
            parsedResponse.recommendedVideos.Append(ValidArray(feeds[0].items))
        end if

        return parsedResponse
    end function

end namespace
