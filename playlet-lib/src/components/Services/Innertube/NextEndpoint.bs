import "pkg:/components/Services/Innertube/Context.bs"
import "pkg:/components/Services/Innertube/Parser.bs"
import "pkg:/components/Services/Innertube/protos/params.proto.gen.bs"
import "pkg:/source/services/HttpClient.bs"
import "pkg:/source/utils/Logging.bs"
import "pkg:/source/utils/ObjectUtils.bs"
import "pkg:/source/utils/Types.bs"

namespace Innertube

    function CreateNextRequest(payloadArgs as object, options = invalid as object) as object
        deviceInfo = CreateObject("roDeviceInfo")

        context = Innertube.CreateContext(Innertube.ClientType.Web, deviceInfo, options)

        payload = {
            "context": context
        }
        payload.Append(payloadArgs)

        request = HttpClient.PostJson("https://www.youtube.com/youtubei/v1/next?prettyPrint=false&alt=json", payload)
        request.Headers(Innertube.CreateHeaders(Innertube.ClientType.Web))

        return request
    end function

    function GetEncodedNextParams(videoIds as object) as string
        if not IsArray(videoIds) or videoIds.Count() = 0
            return ""
        end if

        return Protobuf.Generated.misc.encodeNextParams({
            "video_id": videoIds
        })
    end function

    function ParseInnertubeNextResponse(payload as object, parsedResponse as object, httpResponse as object) as object
        if not IsAssociativeArray(payload)
            LogWarn("Invalid payload", payload)
            return parsedResponse
        end if

        playerOverlayRenderer = ObjectUtils.Dig(payload, ["playerOverlays", "playerOverlayRenderer"])
        if not IsAssociativeArray(playerOverlayRenderer)
            LogWarn("Invalid playerOverlayRenderer", playerOverlayRenderer)
            return parsedResponse
        end if

        endscreen = playerOverlayRenderer["endScreen"]

        feeds = Innertube.ParseResponseDataForFeeds(endscreen, {
            response: httpResponse
            noContainers: true
        })
        if feeds.Count() > 0
            parsedResponse["recommendedVideos"] = ValidArray(feeds[0].items)
        end if

        ' Sometimes the title and author are missing in /player respnonse, so we get them here.
        ' But if we have an error, we don't need them, recommendedVideos is enough to play the
        ' next video, after showing the error dialog.
        if parsedResponse.error <> invalid
            return parsedResponse
        end if

        if StringUtils.IsNullOrEmpty(parsedResponse.title)
            title = ParseText(ObjectUtils.Dig(playerOverlayRenderer, ["videoDetails", "playerOverlayVideoDetailsRenderer", "title"]))
            if not StringUtils.IsNullOrEmpty(title)
                parsedResponse.title = title
            end if
        end if

        if StringUtils.IsNullOrEmpty(parsedResponse.author)
            subtitle = ParseText(ObjectUtils.Dig(playerOverlayRenderer, ["videoDetails", "playerOverlayVideoDetailsRenderer", "subtitle"]))
            if not StringUtils.IsNullOrEmpty(subtitle)
                parsedResponse.author = subtitle
            end if
        end if

        return parsedResponse
    end function

end namespace
