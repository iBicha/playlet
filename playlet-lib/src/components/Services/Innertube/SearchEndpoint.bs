import "pkg:/components/Services/Innertube/Context.bs"
import "pkg:/components/Services/Innertube/Parser.bs"
import "pkg:/components/Services/Innertube/SearchFilters.bs"
import "pkg:/source/services/HttpClient.bs"
import "pkg:/source/utils/Types.bs"

namespace Innertube

    function Search(query as string, searchFilters as object, continuation = "" as string, cancellation = invalid as object) as object
        deviceInfo = CreateObject("roDeviceInfo")

        payload = {
            context: Innertube.CreateContext(Innertube.ClientType.WEB, deviceInfo, "")
        }

        if continuation <> ""
            payload["continuation"] = continuation
        else
            payload["query"] = query
            if searchFilters <> invalid and searchFilters.Count() > 0
                params = Innertube.GetEncodedSearchFilters(searchFilters)
                if params <> ""
                    payload["params"] = Innertube.GetEncodedSearchFilters(searchFilters)
                end if
            end if
        end if

        request = HttpClient.PostJson("https://www.youtube.com/youtubei/v1/search?prettyPrint=false&alt=json", payload)
        request.Headers({
            "accept": "*/*"
            "accept-language": "*"
            "user-agent": INNERTUBE_WEB_USER_AGENT
            "x-youtube-client-name": INNERTUBE_WEB_CLIENT_NAME
            "x-youtube-client-version": INNERTUBE_WEB_CLIENT_VERSION
        })

        request.Cancellation(cancellation)

        response = request.Await()
        if not response.IsSuccess()
            return {
                error: response.ErrorMessage()
            }
        end if

        feeds = ParseResponseDataForFeeds(response.Json())

        result = {
            feeds: feeds
        }

        cacheControl = ParseResponseForCacheControl(response)
        if cacheControl <> invalid
            result["cache-control"] = cacheControl
        end if

        return result
    end function

    ' Not part of search endpoint, but this function is fine here.
    function SearchSuggestions(query as string, cancellation = invalid as object) as object
        request = HttpClient.Get("https://suggestqueries.google.com/complete/search?hl=en&gl=US&ds=yt&client=youtube&xssi=t&oe=UTF&q=" + query.EncodeUriComponent())
        request.Headers({
            "user-agent": INNERTUBE_WEB_USER_AGENT
        })
        request.Cancellation(cancellation)

        response = request.Await()
        if not response.IsSuccess()
            return {
                error: response.ErrorMessage()
            }
        end if

        text = response.Text()
        text = text.Replace(`)]}'`, "")

        parsed = ParseJson(text)
        if not IsArray(parsed) or parsed.Count() < 2
            return {
                error: "Failed to parse search suggestions"
            }
        end if
        parsed = parsed[1]

        suggestions = []
        for each suggestion in parsed
            sugg = suggestion[0]
            if not IsString(sugg)
                continue for
            end if

            suggestions.Push(sugg)
        end for

        result = {
            suggestions: suggestions
        }

        cacheControl = ParseResponseForCacheControl(response)
        if cacheControl <> invalid
            result["cache-control"] = cacheControl
        end if

        return result
    end function

end namespace
