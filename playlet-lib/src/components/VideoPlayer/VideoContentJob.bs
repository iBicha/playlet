import "pkg:/components/Services/Innertube/InnertubeService.bs"
import "pkg:/components/Services/Invidious/InvidiousService.bs"

@job("VideoContentJob")
function ExecuteJob() as void
    input = JobGetInput()

    contentNode = input.content
    invidiousNode = input.invidious
    innertubeNode = input.innertube
    preferencesNode = input.preferences
    loungeServiceNode = input.loungeService
    playletServerPort = input.playletServerPort

    if JobIsCancelled()
        JobCancel()
        return
    end if

    DeleteFile("cachefs:/last_generated_dash.xml")
    DeleteFile("cachefs:/last_generated_hls.m3u8")

    if StringUtils.IsNullOrEmpty(contentNode.videoId)
        JobError("Can't load video information: videoId is missing")
        return
    end if

    service = new Invidious.InvidiousService(invidiousNode)
    backend = preferencesNode["backend.selected"]

    metadata = contentNode.metadata
    if not IsAssociativeArray(metadata)
        cancellation = JobGetCancellation()
        if backend = "playlet"
            visitorData = innertubeNode.visitorData
            if StringUtils.IsNullOrEmpty(visitorData)
                messagePort = CreateObject("roMessagePort")
                MessagePortUtils.ObserveFieldScopedExSafe(innertubeNode, "visitorData", messagePort)
                innertubeNode.requestVisitorData = true
                message = wait(20000, messagePort)
                innertubeNode.unobserveFieldScoped("visitorData")
                if message = invalid
                    innertubeNode.forceRequestVisitorData = true
                    JobError("Failed to get visitor data. Please try again later.")
                    return
                end if
                visitorData = message.getData()
            end if

            accessToken = invalid
            onBehalfOfUser = invalid
            authToken = invidiousNode.authToken
            if authToken <> invalid and authToken.profileNode <> invalid and authToken.profileNode.type = "youtube" and not StringUtils.IsNullOrEmpty(authToken.token)
                accessToken = authToken.token
                onBehalfOfUser = authToken.activeIdentifyToken
            end if

            metadata = InnertubeService.GetVideoMetadata(contentNode.videoId, {
                "cancellation": cancellation
                "credentialTransferToken": loungeServiceNode.credentialTransferToken
                "visitorData": visitorData
                "accessToken": accessToken
                "onBehalfOfUser": onBehalfOfUser
                "signatureTimestamp": true
            })
        else
            metadata = service.GetVideoMetadata(contentNode.videoId, { cancellation: m.top.cancellation })
        end if
    end if

    if JobIsCancelled()
        JobCancel()
        return
    end if

    if metadata = invalid
        JobError("Failed to get video metadata")
        return
    end if

    title = metadata.title
    if not StringUtils.IsNullOrEmpty(title)
        contentNode.title = title
    end if

    author = metadata.author
    if not StringUtils.IsNullOrEmpty(author)
        contentNode.secondaryTitle = metadata.author
    end if
    contentNode.live = metadata.liveNow

    if metadata.error <> invalid
        ' Adding metadata allows us to play next recommended video after displaying the error
        contentNode.addFields({ metadata: metadata })
        JobError(metadata.error)
        return
    end if

    streamUrls = CreateStreamUrls(metadata, service, preferencesNode, backend, playletServerPort)
    if streamUrls.Count() = 0
        contentNode.addFields({ metadata: metadata })
        JobError("No playable streams found for this video.")
        return
    end if

    isDrmDash = SupportsDrmDashManifest(metadata)
    if isDrmDash
        licenseServerURL = UrlUtils.BuildUrl(`http://127.0.0.1:${playletServerPort}/api/innertube/get_drm_license`, invalid, {
            videoId: metadata.videoId
            drmParams: metadata.drmParams
            drmSessionId: metadata.drmSessionId
            cpn: metadata.cpn
        })
        contentNode.drmParams = {
            keySystem: "Widevine"
            licenseServerURL: licenseServerURL
        }
    end if

    ' Forwarding query params to HLS playlists is not needed. In fact, it can cause issues
    ' because the playlist is limited to 4MB, and on large playlists the query params
    ' significantly increase the size of the playlist, making it cropped.
    ' https://github.com/iBicha/playlet/issues/500
    contentNode.ForwardQueryStringParams = false
    contentNode.addFields({
        metadata: metadata
        ' StreamUrls is taken
        playletStreamUrls: streamUrls
        playletStreamUrlIndex: 0
    })

    LogDebug("Setting first url:", streamUrls[0])
    contentNode.url = streamUrls[0]

    SetCaptions(metadata, service, contentNode)

    if metadata.liveNow = true
        contentNode.Live = true
    end if
end function

function CreateStreamUrls(metadata as object, service as Invidious.InvidiousService, preferences as object, backend as string, playletServerPort as integer) as object
    instance = service.GetInstance()
    proxyVideos = preferences["invidious.proxy_videos"]
    preferredQuality = preferences["playback.preferred_quality"]

    streamUrls = []

    if SupportsDrmDashManifest(metadata)
        dashUrl = UrlUtils.AppendQueryParams(`http://127.0.0.1:${playletServerPort}/api/dash`, {
            url: metadata.dashUrl
        })
        streamUrls.push(dashUrl)
    else if SupportsHls(metadata)
        metadata.hlsUrl = AddInstanceToUrlIfNeeded(metadata.hlsUrl, instance)
        AddHlsUrls(streamUrls, metadata, preferredQuality, backend, proxyVideos, playletServerPort)
    else if SupportsDash(metadata)
        AddDashUrls(streamUrls, metadata, preferredQuality, backend, proxyVideos, playletServerPort)
    else if SupportsMuxedFormats(metadata)
        for each stream in metadata.formatStreams
            if StringUtils.IsNullOrEmpty(stream.url)
                continue for
            end if
            stream.url = AddInstanceToUrlIfNeeded(stream.url, instance)
            streamUrls.push(stream.url)
        end for
    end if

    return streamUrls
end function

function SupportsHls(metadata as object) as boolean
    return not StringUtils.IsNullOrEmpty(metadata.hlsUrl)
end function

function SupportsDash(metadata as object) as boolean
    if not IsArray(metadata.adaptiveFormats) or metadata.adaptiveFormats.Count() = 0
        return false
    end if

    for each fmt in metadata.adaptiveFormats
        if not StringUtils.IsNullOrEmpty(fmt.url)
            return true
        end if
    end for

    return false
end function

function SupportsMuxedFormats(metadata as object) as boolean
    return IsArray(metadata.formatStreams) and metadata.formatStreams.Count() > 0
end function

function SupportsDrmDashManifest(metadata as object) as boolean
    if StringUtils.IsNullOrEmpty(metadata.drmParams)
        return false
    end if

    if StringUtils.IsNullOrEmpty(metadata.drmSessionId)
        return false
    end if

    if StringUtils.IsNullOrEmpty(metadata.cpn)
        return false
    end if

    if not IsArray(metadata.licenseInfos) or metadata.licenseInfos.Count() = 0
        return false
    end if

    if StringUtils.IsNullOrEmpty(metadata.dashUrl)
        return false
    end if

    return true
end function

function AddHlsUrls(streamUrls as object, metadata as object, preferredQuality as string, backend as string, proxyVideos as string, playletServerPort as integer)
    hlsUrl = metadata.hlsUrl
    hlsUrlLocal = invalid
    hlsUrlFiltered = invalid
    hlsUrlFilteredLocal = invalid

    supportsProxying = backend <> "playlet"
    hasQuality = not StringUtils.IsNullOrEmpty(preferredQuality) and preferredQuality <> "auto"

    if supportsProxying
        hlsUrlLocal = UrlUtils.AppendQueryParams(hlsUrl, { local: "true" })
    end if

    ' Redirect to Playet's local web server, where we will be
    ' dynamically adding storyboards to the HLS manifest, and filter quality
    hlsUrl = UrlUtils.AppendQueryParams(`http://127.0.0.1:${playletServerPort}/api/hls`, { url: hlsUrl, v: metadata.videoId })
    if supportsProxying
        hlsUrlLocal = UrlUtils.AppendQueryParams(`http://127.0.0.1:${playletServerPort}/api/hls`, { url: hlsUrlLocal, v: metadata.videoId })
    end if

    if hasQuality
        hlsUrlFiltered = UrlUtils.AppendQueryParams(hlsUrl, { quality: preferredQuality })
        if supportsProxying
            hlsUrlFilteredLocal = UrlUtils.AppendQueryParams(hlsUrlLocal, { quality: preferredQuality })
        end if
    end if

    AddUrls(streamUrls, hlsUrl, hlsUrlLocal, hlsUrlFiltered, hlsUrlFilteredLocal, proxyVideos)
end function

function AddDashUrls(streamUrls as object, metadata as object, preferredQuality as string, backend as string, proxyVideos as string, playletServerPort as integer) as void
    ' Redirect to Playet's local web server, where will will be
    ' dynamically generating the DASH manifest, and filter quality
    dashUrl = UrlUtils.AppendQueryParams(`http://127.0.0.1:${playletServerPort}/api/dash`, {
        v: metadata.videoId
    })

    dashUrlLocal = invalid
    dashUrlFiltered = invalid
    dashUrlFilteredLocal = invalid

    supportsProxying = backend <> "playlet"
    hasQuality = not StringUtils.IsNullOrEmpty(preferredQuality) and preferredQuality <> "auto"

    if supportsProxying
        dashUrlLocal = UrlUtils.AppendQueryParams(dashUrl, { local: "true" })
    end if

    if hasQuality
        dashUrlFiltered = UrlUtils.AppendQueryParams(dashUrl, { quality: preferredQuality })
        if supportsProxying
            dashUrlFilteredLocal = UrlUtils.AppendQueryParams(dashUrlLocal, { quality: preferredQuality })
        end if
    end if

    AddUrls(streamUrls, dashUrl, dashUrlLocal, dashUrlFiltered, dashUrlFilteredLocal, proxyVideos)
end function

function AddUrls(streamUrls as object, url as string, urlLocal as dynamic, urlFiltered as dynamic, urlFilteredLocal as dynamic, proxyVideos as string)
    if proxyVideos = "if_needed"
        if urlFiltered <> invalid
            streamUrls.push(urlFiltered)
        end if
        streamUrls.push(url)
        if urlFilteredLocal <> invalid
            streamUrls.push(urlFilteredLocal)
        end if
        if urlLocal <> invalid
            streamUrls.push(urlLocal)
        end if
    else if proxyVideos = "never"
        if urlFiltered <> invalid
            streamUrls.push(urlFiltered)
        end if
        streamUrls.push(url)
    else if proxyVideos = "always"
        if urlFilteredLocal <> invalid
            streamUrls.push(urlFilteredLocal)
        end if
        if urlLocal <> invalid
            streamUrls.push(urlLocal)
        end if
    end if

    if streamUrls.Count() = 0
        if urlFiltered <> invalid
            streamUrls.push(urlFiltered)
        end if
        streamUrls.push(url)
        if urlFilteredLocal <> invalid
            streamUrls.push(urlFilteredLocal)
        end if
        if urlLocal <> invalid
            streamUrls.push(urlLocal)
        end if
    end if
end function

function AddInstanceToUrlIfNeeded(url as dynamic, instance as string) as dynamic
    if IsString(url) and url.StartsWith("/")
        return instance + url
    end if
    return url
end function

function SetCaptions(metadata as object, service as object, contentNode as object) as void
    if metadata.captions.Count() = 0
        return
    end if

    isoLanguageList = ParseJson(ReadAsciiFile("libpkg:/config/ISO-639-1-to-ISO-639-2T.json5"))
    instance = service.GetInstance()

    subtitleTracks = []

    for each caption in metadata.captions
        code = caption.language_code
        if StringUtils.IsNullOrEmpty(code)
            continue for
        end if

        if code.InStr("-") <> -1
            code = code.Split("-")[0]
        end if

        if code.len() = 2
            if not isoLanguageList.DoesExist(code)
                continue for
            end if
            code = isoLanguageList[code]
        end if

        url = caption.url
        if not url.StartsWith("http")
            url = instance + url
        end if

        subtitleTracks.Push({
            Description: caption.label
            Language: code
            TrackName: url
        })
    end for

    contentNode.ClosedCaptions = True
    contentNode.SubtitleTracks = subtitleTracks
end function
