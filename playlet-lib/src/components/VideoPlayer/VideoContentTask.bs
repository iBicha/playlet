import "pkg:/components/Services/Innertube/InnertubeService.bs"
import "pkg:/components/Services/Invidious/InvidiousService.bs"

@asynctask
function VideoContentTask(input as object) as object
    contentNode = input.content
    invidiousNode = input.invidious
    innertubeNode = input.innertube
    preferencesNode = input.preferences
    loungeServiceNode = input.loungeService
    playletServerPort = input.playletServerPort

    if m.top.cancel
        return invalid
    end if

    if StringUtils.IsNullOrEmpty(contentNode.videoId)
        throw "Can't load video information: videoId is missing"
    end if

    service = new Invidious.InvidiousService(invidiousNode)

    backend = preferencesNode["backend.selected"]
    if backend = "playlet"
        metadata = InnertubeService.GetVideoMetadata(contentNode.videoId, {
            "cancellation": m.top.cancellation
            "credentialTransferToken": loungeServiceNode.credentialTransferToken
            "visitorData": innertubeNode.visitorData
        })
    else
        metadata = service.GetVideoMetadata(contentNode.videoId, { cancellation: m.top.cancellation })
    end if

    if metadata = invalid
        return {
            success: false
            error: "Failed to get video metadata"
        }
    end if

    if m.top.cancel
        return invalid
    end if

    contentNode.title = metadata.title
    contentNode.secondaryTitle = metadata.author
    contentNode.live = metadata.liveNow

    if metadata.error <> invalid
        errorMessage = metadata.error
        knownIssue = `{"error":"This helps protect our community. Learn more"}`

        if metadata.error.InStr(knownIssue) <> -1
            errorMessage = `NOTE: Please see the following link for more information about the error\nhttps://github.com/iBicha/playlet/issues/400\n` + errorMessage
        end if

        ' Adding metadata allows us to play next recommended video after displaying the error
        contentNode.addFields({ metadata: metadata })

        return {
            success: false
            error: errorMessage
        }
    end if

    streamUrls = CreateStreamUrls(metadata, service, preferencesNode, backend, playletServerPort)
    ' Forwarding query params to HLS playlists is not needed. In fact, it can cause issues
    ' because the playlist is limited to 4MB, and on large playlists the query params
    ' significantly increase the size of the playlist, making it cropped.
    contentNode.ForwardQueryStringParams = false
    contentNode.addFields({
        metadata: metadata
        ' StreamUrls is taken
        playletStreamUrls: streamUrls
        playletStreamUrlIndex: 0
    })

    contentNode.url = streamUrls[0]

    SetCaptions(metadata, service, contentNode)

    if metadata.liveNow = true
        contentNode.Live = true
    end if

    return {
        success: true
    }
end function

function CreateStreamUrls(metadata as object, service as Invidious.InvidiousService, preferences as object, backend as string, playletServerPort as integer) as object
    instance = service.GetInstance()
    proxyVideos = preferences["invidious.proxy_videos"]
    preferredQuality = preferences["playback.preferred_quality"]

    streamUrls = []

    if metadata.hlsUrl <> invalid
        metadata.hlsUrl = AddInstanceToUrlIfNeeded(metadata.hlsUrl, instance)
        AddHlsUrls(streamUrls, metadata, preferredQuality, backend, proxyVideos, playletServerPort)
    else
        ' Not that we're using dashUrl, but why not, it useful when testing it
        metadata.dashUrl = AddInstanceToUrlIfNeeded(metadata.dashUrl, instance)
        AddDashUrls(streamUrls, metadata, preferredQuality, backend, proxyVideos, playletServerPort)
    end if

    return streamUrls
end function

function AddHlsUrls(streamUrls as object, metadata as object, preferredQuality as string, backend as string, proxyVideos as string, playletServerPort as integer)
    hlsUrl = metadata.hlsUrl
    hlsUrlLocal = invalid
    hlsUrlFiltered = invalid
    hlsUrlFilteredLocal = invalid

    supportsProxying = backend <> "playlet"
    hasQuality = not StringUtils.IsNullOrEmpty(preferredQuality) and preferredQuality <> "auto"

    if supportsProxying
        hlsUrlLocal = UrlUtils.AppendQueryParams(hlsUrl, { local: "true" })
    end if

    ' Redirect to Playet's local web server, where we will be
    ' dynamically adding storyboards to the HLS manifest, and filter quality
    hlsUrl = UrlUtils.AppendQueryParams(`http://127.0.0.1:${playletServerPort}/api/hls`, { url: hlsUrl })
    if supportsProxying
        hlsUrlLocal = UrlUtils.AppendQueryParams(`http://127.0.0.1:${playletServerPort}/api/hls`, { url: hlsUrlLocal })
    end if

    if hasQuality
        hlsUrlFiltered = UrlUtils.AppendQueryParams(hlsUrl, { quality: preferredQuality })
        if supportsProxying
            hlsUrlFilteredLocal = UrlUtils.AppendQueryParams(hlsUrlLocal, { quality: preferredQuality })
        end if
    end if

    AddUrls(streamUrls, hlsUrl, hlsUrlLocal, hlsUrlFiltered, hlsUrlFilteredLocal, proxyVideos)
end function

function AddDashUrls(streamUrls as object, metadata as object, preferredQuality as string, backend as string, proxyVideos as string, playletServerPort as integer) as void
    ' Redirect to Playet's local web server, where will will be
    ' dynamically generating the DASH manifest, and filter quality
    dashUrl = UrlUtils.AppendQueryParams(`http://127.0.0.1:${playletServerPort}/api/dash`, { v: metadata.videoId })
    dashUrlLocal = invalid
    dashUrlFiltered = invalid
    dashUrlFilteredLocal = invalid

    supportsProxying = backend <> "playlet"
    hasQuality = not StringUtils.IsNullOrEmpty(preferredQuality) and preferredQuality <> "auto"

    if supportsProxying
        dashUrlLocal = UrlUtils.AppendQueryParams(dashUrl, { local: "true" })
    end if

    if hasQuality
        dashUrlFiltered = UrlUtils.AppendQueryParams(dashUrl, { quality: preferredQuality })
        if supportsProxying
            dashUrlFilteredLocal = UrlUtils.AppendQueryParams(dashUrlLocal, { quality: preferredQuality })
        end if
    end if

    AddUrls(streamUrls, dashUrl, dashUrlLocal, dashUrlFiltered, dashUrlFilteredLocal, proxyVideos)
end function

function AddUrls(streamUrls as object, url as string, urlLocal as dynamic, urlFiltered as dynamic, urlFilteredLocal as dynamic, proxyVideos as string)
    if proxyVideos = "if_needed"
        if urlFiltered <> invalid
            streamUrls.push(urlFiltered)
        end if
        streamUrls.push(url)
        if urlFilteredLocal <> invalid
            streamUrls.push(urlFilteredLocal)
        end if
        if urlLocal <> invalid
            streamUrls.push(urlLocal)
        end if
    else if proxyVideos = "never"
        if urlFiltered <> invalid
            streamUrls.push(urlFiltered)
        end if
        streamUrls.push(url)
    else if proxyVideos = "always"
        if urlFilteredLocal <> invalid
            streamUrls.push(urlFilteredLocal)
        end if
        if urlLocal <> invalid
            streamUrls.push(urlLocal)
        end if
    end if

    if streamUrls.Count() = 0
        if urlFiltered <> invalid
            streamUrls.push(urlFiltered)
        end if
        streamUrls.push(url)
        if urlFilteredLocal <> invalid
            streamUrls.push(urlFilteredLocal)
        end if
        if urlLocal <> invalid
            streamUrls.push(urlLocal)
        end if
    end if
end function

function AddInstanceToUrlIfNeeded(url as object, instance as string) as string
    if url.StartsWith("/")
        return instance + url
    end if
    return url
end function

function SetCaptions(metadata as object, service as object, contentNode as object) as void
    if metadata.captions.Count() = 0
        return
    end if

    ' TODO:P2 we don't need to read and parse this every time
    isoLanguageList = ParseJson(ReadAsciiFile("libpkg:/config/ISO-639-1-to-ISO-639-2T.json5"))
    instance = service.GetInstance()

    subtitleTracks = []

    for each caption in metadata.captions
        code = caption.language_code
        if StringUtils.IsNullOrEmpty(code)
            continue for
        end if

        if code.InStr("-") <> -1
            code = code.Split("-")[0]
        end if

        if code.len() = 2
            if not isoLanguageList.DoesExist(code)
                continue for
            end if
            code = isoLanguageList[code]
        end if

        url = caption.url
        if not url.StartsWith("http")
            url = instance + url
        end if

        subtitleTracks.Push({
            Description: caption.label
            Language: code
            TrackName: url
        })
    end for

    contentNode.ClosedCaptions = True
    contentNode.SubtitleTracks = subtitleTracks
end function
