import "pkg:/components/Services/Innertube/InnertubeService.bs"
import "pkg:/source/utils/Logging.bs"
import "pkg:/source/utils/MessagePortUtils.bs"
import "pkg:/source/utils/RegistryUtils.bs"
import "pkg:/source/utils/StringUtils.bs"
import "pkg:/source/utils/Types.bs"

function Init()
    m.top.functionName = "LoggerLoop"

    port = CreateObject("roMessagePort")

    m.top.ObserveField("logLine", port)

    scene = m.top.getScene()
    MessagePortUtils.ObserveFieldScopedExSafe(scene, "systemLogEvent", port)

    m.port = port

    #if DEBUG
        StartLogger(m.top, LogLevel.Debug)
    #else
        StartLogger(m.top, LogLevel.Info)
    #end if
end function

function StartLogger(logger as object, logLevel = LogLevel.Info as LogLevel) as void
    if m.global.logger <> invalid
        return
    end if

    logger.logLevel = logLevel
    m.global.addFields({ logger: logger })
    logger.control = "run"
end function

function LoggerLoop()
    port = m.port

    buffer = CreateObject("roByteArray")
    logsFile = m.top.folder + "/" + m.top.filename
    previousLogsFile = m.top.folder + "/" + m.top.filenamePrevious
    filenameStartup = m.top.filenameStartup
    dateTime = CreateObject("roDateTime")

    CreateDirectory(m.top.folder)
    DeleteFile(previousLogsFile)
    MoveFile(logsFile, previousLogsFile)

    startUpLogs = ReadAsciiFile(filenameStartup)
    if not StringUtils.IsNullOrEmpty(startUpLogs)
        line = `************* Startup Logs *************\n${startUpLogs}*********** End Startup Logs ***********\n`
        ' bs:disable-next-line LINT3012
        print line
        buffer.FromAsciiString(line)
        buffer.AppendFile(logsFile)
    end if

    appMemoryMonitor = CreateObject("roAppMemoryMonitor")
    if appMemoryMonitor <> invalid and FindMemberFunction(appMemoryMonitor, "EnableMemoryWarningEvent") <> invalid
        appMemoryMonitor.SetMessagePort(port)
        appMemoryMonitor.EnableMemoryWarningEvent(true)
    end if

    deviceInfo = CreateObject("roDeviceInfo")
    deviceInfo.SetMessagePort(port)
    deviceInfo.EnableLowGeneralMemoryEvent(true)
    m.lastDeviceInfoMemoryLevel = ""

    ' TestFeeds()
    ' TestAuth()

    while true
        msg = wait(0, port)
        msgType = type(msg)
        if msgType = "roSGNodeEvent"
            field = msg.getField()
            if field = "logLine"
                OnLineLog(msg, dateTime, logsFile, buffer)
            else if field = "systemLogEvent"
                OnLineSysLog(msg, dateTime, logsFile, buffer)
            end if
        else if msgType = "roAppMemoryNotificationEvent"
            OnLineLogMonitorMemoryWarning(msg, dateTime, logsFile, buffer)
        else if msgType = "roDeviceInfoEvent"
            OnLineLogDeviceInfoMemoryWarning(msg, dateTime, logsFile, buffer)
        end if
    end while
end function

function OnLineLog(event as object, dateTime as object, logsFile as string, buffer as object)
    line = FormatTime(dateTime) + event.getData()
    ' bs:disable-next-line LINT3012
    print line

    buffer.FromAsciiString(line + `\n`)
    buffer.AppendFile(logsFile)
end function

function OnLineSysLog(event as object, dateTime as object, logsFile as string, buffer as object) as void
    info = event.getData()
    if info.LogType <> "http.error"
        return
    end if
    line = FormatTime(dateTime) + "[ERROR][SysLog] " + ToString(info)
    ' bs:disable-next-line LINT3012
    print line

    buffer.FromAsciiString(line + `\n`)
    buffer.AppendFile(logsFile)
end function

function OnLineLogMonitorMemoryWarning(event as object, dateTime as object, logsFile as string, buffer as object) as void
    info = event.getInfo()
    line = FormatTime(dateTime) + "[WARN][AppMonitorMemory] " + ToString(info)

    ' bs:disable-next-line LINT3012
    print line

    buffer.FromAsciiString(line + `\n`)
    buffer.AppendFile(logsFile)
end function

function OnLineLogDeviceInfoMemoryWarning(event as object, dateTime as object, logsFile as string, buffer as object) as void
    info = event.getInfo()
    if not IsString(info.generalMemoryLevel)
        return
    end if

    ' roDeviceInfoEvent can be a bit spammy, so only log if the memory level has changed
    if info.generalMemoryLevel = m.lastDeviceInfoMemoryLevel
        return
    end if
    m.lastDeviceInfoMemoryLevel = info.generalMemoryLevel

    line = FormatTime(dateTime) + "[WARN][DeviceInfoMemory] " + ToString(info)

    ' bs:disable-next-line LINT3012
    print line

    buffer.FromAsciiString(line + `\n`)
    buffer.AppendFile(logsFile)
end function

' Note: although the timestamp should be captured in the caller, not the logger,
' it is done here to avoid adding overhead to the caller thread.
function FormatTime(dateTime as object) as string
    dateTime.Mark()
    dateTime.ToLocalTime()

    hours = dateTime.GetHours().ToStr()
    if hours.Len() = 1
        hours = "0" + hours
    end if

    minutes = dateTime.GetMinutes().ToStr()
    if minutes.Len() = 1
        minutes = "0" + minutes
    end if

    seconds = dateTime.GetSeconds().ToStr()
    if seconds.Len() = 1
        seconds = "0" + seconds
    end if

    milliseconds = dateTime.GetMilliseconds().ToStr()
    if milliseconds.Len() = 1
        milliseconds = "00" + milliseconds
    else if milliseconds.Len() = 2
        milliseconds = "0" + milliseconds
    end if

    return "[" + hours + ":" + minutes + ":" + seconds + "." + milliseconds + "]"
end function

function TestFeeds()
    timer = CreateObject("roTimeSpan")

    ? "Search suggestions"
    timer.Mark()
    suggestions = InnertubeService.SearchSuggestions("pewdiepie")
    ? "Search suggestions took " + timer.TotalMilliseconds().ToStr() + "ms"
    ? FormatJson(suggestions)

    ? "Search"
    timer.Mark()
    searchFeed = InnertubeService.Search("choufli hal 2008")
    ? "Search took " + timer.TotalMilliseconds().ToStr() + "ms"
    ? FormatJson(searchFeed)

    ? "Trending"
    timer.Mark()
    trending = InnertubeService.GetTrending()
    ? "Trending took " + timer.TotalMilliseconds().ToStr() + "ms"
    ? FormatJson(trending)

    ? "Music"
    timer.Mark()
    music = InnertubeService.GetTrending({ "type": "music" })
    ? "Music took " + timer.TotalMilliseconds().ToStr() + "ms"
    ? FormatJson(music)

    ? "Gaming"
    timer.Mark()
    gaming = InnertubeService.GetTrending({ "type": "gaming" })
    ? "Gaming took " + timer.TotalMilliseconds().ToStr() + "ms"
    ? FormatJson(gaming)

    ? "Movies"
    timer.Mark()
    movies = InnertubeService.GetTrending({ "type": "movies" })
    ? "Movies took " + timer.TotalMilliseconds().ToStr() + "ms"
    ? FormatJson(movies)

    ? "Channel"
    timer.Mark()
    channel = InnertubeService.GetChannel("UCvJJ_dzjViJCoLf5uKUTwoA")
    ? "Channel took " + timer.TotalMilliseconds().ToStr() + "ms"
    ? FormatJson(channel)

    ? "Playlist"
    timer.Mark()
    playlist = InnertubeService.GetPlaylist("PLplXQ2cg9B_qrCVd1J_iId5SvP8Kf_BfS")
    ? "Playlist took " + timer.TotalMilliseconds().ToStr() + "ms"
    ? FormatJson(playlist)
end function

function TestAuth()
    ? "Auth"
    auth = RegistryUtils.Read("auth", "TEST")
    if auth = invalid
        code = InnertubeService.AuthGetCode()
        ? code
        url = InnertubeService.AuthGetActivationUrl(code)
        ? url
        auth = InnertubeService.AuthPollForAccessToken(code)
        ? auth
        RegistryUtils.Write("auth", FormatJson(auth), "TEST")
    else
        auth = ParseJson(auth)

        if InnertubeService.AuthRefreshAccessTokenIfNeeded(auth)
            RegistryUtils.Write("auth", FormatJson(auth), "TEST")
            ? "Refreshed access token"
        end if
    end if

    ' if InnertubeService.AuthRevokeAccessToken(auth)
    '     RegistryUtils.Delete("auth", "TEST")
    '     ? "Revoked access token"
    ' end if

    timer = CreateObject("roTimeSpan")

    ? "Home"
    timer.Mark()
    home = InnertubeService.GetHome({ "accessToken": auth.accessToken })
    ? "Home took " + timer.TotalMilliseconds().ToStr() + "ms"
    WriteAsciiFile("tmp:/home.json", FormatJson(home))

    ? "Subscriptions"
    timer.Mark()
    subscriptions = InnertubeService.GetSubscriptions({ "accessToken": auth.accessToken })
    ? "Subscriptions took " + timer.TotalMilliseconds().ToStr() + "ms"
    WriteAsciiFile("tmp:/subscriptions.json", FormatJson(subscriptions))

    ? "Watch history"
    timer.Mark()
    history = InnertubeService.GetWatchHistory({ "accessToken": auth.accessToken })
    ? "Watch history took " + timer.TotalMilliseconds().ToStr() + "ms"
    WriteAsciiFile("tmp:/history.json", FormatJson(history))

    ? "Playlists"
    timer.Mark()
    playlists = InnertubeService.GetPlaylists({ "accessToken": auth.accessToken })
    ? "Playlists took " + timer.TotalMilliseconds().ToStr() + "ms"
    WriteAsciiFile("tmp:/playlists.json", FormatJson(playlists))
end function
