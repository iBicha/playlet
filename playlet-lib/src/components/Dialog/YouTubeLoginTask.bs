import "pkg:/components/Dialog/DialogUtils.bs"
import "pkg:/components/Screens/ProfileScreen/YouTubeAccountSelectionView/YouTubeAccountSelectionViewUtils.bs"
import "pkg:/components/Services/Innertube/InnertubeService.bs"
import "pkg:/source/utils/CancellationUtils.bs"
import "pkg:/source/utils/Logging.bs"

@asynctask
function YouTubeLoginTask(input as object) as object
    profilesNode = input.profilesService
    appController = input.appController
    dialogNode = input.dialog

    cancellation = m.top.cancellation
    ' TODO:P2 cache client identity
    authCode = InnertubeService.AuthGetCode(cancellation)

    if CancellationUtils.IsCancelled(cancellation)
        return invalid
    end if

    if authCode.error <> invalid
        LogError(authCode.error)
        DialogUtils.ShowDialogEx({
            title: "Error"
            message: authCode.error
            large: true
        })
        return invalid
    end if

    url = InnertubeService.AuthGetActivationUrl(authCode)

    LogInfo("Login url:", url)

    dialogNode.url = url
    dialogNode.code = authCode.userCode

    accessToken = InnertubeService.AuthPollForAccessToken(authCode, cancellation)

    if CancellationUtils.IsCancelled(cancellation)
        return invalid
    end if

    if accessToken.error <> invalid
        LogError(accessToken.error)
        DialogUtils.ShowDialogEx({
            title: "Error"
            message: accessToken.error
            large: true
        })
        return invalid
    end if

    accounts = InnertubeService.AuthListAccounts(accessToken.accessToken, cancellation)

    if CancellationUtils.IsCancelled(cancellation)
        return invalid
    end if

    if IsAssociativeArray(accounts) and accounts.error <> invalid
        LogError(accounts.error)
        DialogUtils.ShowDialogEx({
            title: "Error"
            message: accounts.error
            large: true
        })
        return invalid
    end if

    accountItem = SelectAccount(accounts, appController)
    if accountItem = invalid
        LogError("No accounts found")
        DialogUtils.ShowDialogEx({
            title: "Error"
            message: "No accounts found"
            large: true
        })
        return invalid
    end if

    profile = CreateProfileContentNode(accountItem, accessToken)
    profilesNode@.LoginWithProfile(profile)

    dialogNode.close = true

    return invalid
end function

function SelectAccount(accounts as object, appController as object) as object
    if not IsArray(accounts) or accounts.Count() = 0
        return invalid
    end if

    if accounts.Count() = 1
        return accounts[0]
    end if

    accountSelectionView = YouTubeAccountSelectionViewUtils.Open(appController)
    accountSelectionView.accounts = accounts

    messagePort = CreateObject("roMessagePort")
    MessagePortUtils.ObserveFieldScopedExSafe(accountSelectionView, "selectedAccount", messagePort)
    MessagePortUtils.ObserveFieldScopedExSafe(accountSelectionView, "wasClosed", messagePort)

    msg = wait(0, messagePort)

    accountSelectionView.unobserveFieldScoped("selectedAccount")
    accountSelectionView.unobserveFieldScoped("wasClosed")

    if msg = invalid
        return invalid
    end if

    field = msg.getField()
    if field = "wasClosed"
        return invalid
    end if

    return msg.getData()
end function

function CreateProfileContentNode(accountItem as object, accessToken as object) as object
    profile = CreateObject("roSGNode", "ProfileContentNode")
    profile.type = "youtube"
    profile.serverUrl = "http://127.0.0.1:8888/playlet-invidious-backend"
    username = accountItem.channelHandle
    if StringUtils.IsNullOrEmpty(username)
        username = accountItem.accountByline
    end if
    profile.username = username
    profile.activeIdentifyToken = GetActiveIdentityToken(accountItem)
    profile.thumbnail = accountItem.accountPhoto
    profile.accessToken = accessToken.accessToken
    profile.refreshToken = accessToken.refreshToken
    profile.scope = accessToken.scope
    profile.tokenType = accessToken.tokenType
    profile.expiresIn = accessToken.expiresIn
    profile.expiresTimestamp = accessToken.expiresTimestamp
    profile.clientId = accessToken.clientId
    profile.clientSecret = accessToken.clientSecret

    return profile
end function

function GetActiveIdentityToken(accountItem as object) as string
    if ValidBool(accountItem.isSelected)
        return ""
    end if

    supportedTokens = ObjectUtils.Dig(accountItem, "serviceEndpoint", "selectActiveIdentityEndpoint", "supportedTokens")
    if not IsArray(supportedTokens) or supportedTokens.Count() = 0
        return ""
    end if

    for each supportedToken in supportedTokens
        if not IsAssociativeArray(supportedToken)
            continue for
        end if

        pageId = ObjectUtils.Dig(supportedToken, "pageIdToken", "pageId")
        if not StringUtils.IsNullOrEmpty(pageId)
            return pageId
        end if

        obfuscatedGaiaId = ObjectUtils.Dig(supportedToken, "accountStateToken", "obfuscatedGaiaId")
        if not StringUtils.IsNullOrEmpty(obfuscatedGaiaId)
            return obfuscatedGaiaId
        end if

        datasyncIdToken = ObjectUtils.Dig(supportedToken, "datasyncIdToken", "datasyncIdToken")
        if not StringUtils.IsNullOrEmpty(datasyncIdToken)
            ' "datasyncIdToken": "123456789012345678901||123456789012345678901"
            match = /(\d+)\|\|(\d+)/.match(datasyncIdToken)
            if match.Count() = 3
                return match[1]
            end if
        end if
    end for

    return ""
end function
