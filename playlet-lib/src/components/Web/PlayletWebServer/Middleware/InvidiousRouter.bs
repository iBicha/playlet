import "pkg:/components/Services/Invidious/InvidiousService.bs"
import "pkg:/components/Web/WebServer/Http/HttpRouter.bs"
import "pkg:/source/utils/CryptoUtils.bs"

namespace Http

    class InvidiousRouter extends HttpRouter

        function new(server as object)
            super()

            task = server.task
            m.profilesNode = task.profilesService
            m.invidiousNode = task.invidious
            m.invidiousService = new Invidious.InvidiousService(m.invidiousNode)
        end function

        @get("/invidious/login")
        function Login(context as object) as boolean
            response = context.response

            authLink = m.invidiousNode@.GetAuthorizeTokenLink()
            response.Redirect(authLink)
            return true
        end function

        @get("/invidious/token_callback")
        function OnTokenReceived(context as object) as boolean
            request = context.request
            response = context.response

            if request.query["token"] <> invalid and request.query["ref"] <> invalid
                ' Invidious encodes token and username twice
                token = request.query["token"].DecodeUriComponent().DecodeUriComponent()
                username = request.query["username"].DecodeUriComponent().DecodeUriComponent()
                referer = request.query["ref"].DecodeUriComponent()

                profile = CreateObject("roSGNode", "ProfileContentNode")
                profile.username = username
                profile.accessToken = token
                profile.serverUrl = referer

                m.profilesNode@.LoginWithProfile(profile)
            end if
            response.Redirect("/")
            return true
        end function

        ' This is an endpoint allowing the web app to make an authenticated request
        ' without needing the Invidious token
        ' This is a GET not a POST for better caching
        @get("/invidious/authenticated-request")
        function AuthRequestProxy(context as object) as boolean
            request = context.request
            response = context.response

            token = m.invidiousNode.authToken
            if token = invalid
                response.Default(403, "No token, not logged in")
                return true
            end if

            feedSource = request.query["feed-source"]
            if feedSource = invalid
                response.Default(400, "Expected feed-source")
                return true
            end if

            feedSource = ParseJson(feedSource)
            if feedSource = invalid
                response.Default(400, "Expected valid JSON for feed-source")
                return true
            end if

            additionalQueryParams = invalid
            if feedSource.state <> invalid and feedSource.state.queryParams <> invalid
                additionalQueryParams = feedSource.state.queryParams
            end if

            invResponse = m.invidiousService.MakeRequest(feedSource, additionalQueryParams)
            if not invResponse.success
                response.Default(500, `Failed to make request: ${invResponse.error}`)
                return true
            end if

            response.Json(invResponse.result)
            return true
        end function

    end class

end namespace
