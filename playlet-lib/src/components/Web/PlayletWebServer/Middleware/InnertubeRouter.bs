import "pkg:/components/Services/Innertube/Constants.bs"
import "pkg:/components/Services/Innertube/SessionData.bs"
import "pkg:/components/Web/WebServer/Http/HttpRouter.bs"
import "pkg:/source/services/HttpClient.bs"

namespace Http

    class InnertubeRouter extends HttpRouter

        function new(server as object)
            super()

            m.innertube = server.sceneNodes.innertube
            m.profilesService = server.sceneNodes.profilesService
        end function

        @get("/api/innertube/session")
        function GetSessionData(context as object) as object
            response = context.response

            sessionData = {
                "timestamp": m.innertube.timestamp
                "visitorData": m.innertube.visitorData
            }

            response.Json(sessionData)
            return true
        end function

        @post("/api/innertube/session")
        function SetSessionData(context as object) as object
            request = context.request
            response = context.response

            payload = request.BodyJson()
            if payload = invalid or not IsAssociativeArray(payload)
                response.Default(400, "Invalid payload")
                return true
            end if

            if not IsInt(payload.timestamp)
                response.Default(400, "Invalid timestamp")
                return true
            end if
            if StringUtils.IsNullOrEmpty(payload.visitorData)
                response.Default(400, "Invalid visitorData")
                return true
            end if

            Innertube.SaveSessionDataToRegistry({
                "timestamp": payload.timestamp
                "visitorData": payload.visitorData
            })

            m.innertube.timestamp = payload.timestamp
            m.innertube.visitorData = payload.visitorData
            response.Default(204, "Session data updated successfully")
            return true
        end function

        @post("/api/innertube/proxy")
        function ProxyRequest(context as object) as boolean
            request = context.request
            response = context.response

            requestArgs = request.BodyJson()
            if requestArgs = invalid
                response.Default(400, "Invalid request body")
                return true
            end if

            requestHeaders = requestArgs.Headers
            ' Ytjs can send requests without specifying a User-Agent.
            ' In this case, Roku would use its default User-Agent.
            if StringUtils.IsNullOrEmpty(requestHeaders["User-Agent"])
                requestHeaders["User-Agent"] = VIDEO_PLAYER_USER_AGENT
            end if

            httpReq = HttpClient.FromObject(requestArgs)
            httpRes = httpReq.Await()

            result = {
                "status": httpRes.StatusCode()
                "headers": httpRes.Headers()
                "body": httpRes.Text()
            }

            response.Json(result)
            return true
        end function

        @post("/api/innertube/get_drm_license")
        function GetDrmLicense(context as object) as object
            request = context.request
            response = context.response

            drmStringQueryParams = ["videoId", "drmParams", "drmSessionId", "cpn"]
            for each paramName in drmStringQueryParams
                if StringUtils.IsNullOrEmpty(request.query[paramName])
                    response.Default(400, "Missing " + paramName)
                    return true
                end if
            end for

            licenseRequest = request.BodyBytes()
            if not IsByteArray(licenseRequest) or licenseRequest.count() = 0
                response.Default(400, "Missing licenseRequest")
                return true
            end if

            options = {
                "videoId": request.query.videoId
                "drmParams": request.query.drmParams
                "drmSessionId": request.query.drmSessionId
                "cpn": request.query.cpn
                "licenseRequest": licenseRequest.ToBase64String()
            }

            currentProfile = m.profilesService.currentProfile
            if currentProfile <> invalid and currentProfile.type = "youtube"
                options["accessToken"] = currentProfile.accessToken
            else
                options["visitorData"] = m.innertube.visitorData
            end if

            drmResponse = InnertubeService.GetDrmLicense(options)

            if IsByteArray(drmResponse)
                response.http_code = 200
                response.SetBodyDataBuffer(drmResponse)
                response.ContentType("text/html; charset=utf-8")
                response.headers["Cache-Control"] = "no-cache"
            else if IsAssociativeArray(drmResponse)
                response.Default(500, FormatJson(drmResponse))
            else
                response.Default(500, "Invalid DRM license response")
            end if

            return true
        end function

    end class

end namespace
