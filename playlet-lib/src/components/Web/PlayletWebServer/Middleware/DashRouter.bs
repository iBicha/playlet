import "pkg:/components/Services/Dash/DashManifest.bs"
import "pkg:/components/Services/Invidious/InvidiousService.bs"
import "pkg:/components/Web/WebServer/Http/HttpRouter.bs"
import "pkg:/source/utils/StringUtils.bs"
import "pkg:/source/utils/Types.bs"

namespace Http

    class DashRouter extends HttpRouter
        function new(server as object)
            super()

            m.invidiousNode = server.task.invidious
            m.invidiousService = new Invidious.InvidiousService(m.invidiousNode)
            ' No need to pass the invidious instance here, we will refresh it for
            ' each request to make sure we are using the latest one
            m.dashManifest = new DashManifest("")
        end function

        @get("/api/dash")
        function GenerateDashManifest(context as object) as boolean
            request = context.request
            response = context.response

            v = request.query.v
            local = request.query.local
            quality = request.query.quality

            if StringUtils.IsNullOrEmpty(v)
                response.Default(400, "Missing video id")
                return true
            end if

            metadata = m.invidiousService.GetVideoMetadata(v)
            if metadata.error <> invalid
                response.Default(500, metadata.error)
                return true
            end if

            m.dashManifest.invidiousInstance = m.invidiousService.GetInstance()

            qualityFilter = m.CreateQualityFilter(quality)
            xmlContent = m.dashManifest.fromVideoMetadata(metadata, qualityFilter, ValidString(local) = "true")

            response.http_code = 200
            response.SetBodyDataString(xmlContent)
            response.ContentType("application/dash+xml")

            return true
        end function

        function CreateQualityFilter(quality as dynamic) as object
            qualityFilter = {}
            if not IsString(quality)
                return qualityFilter
            end if

            includeList = quality.split(",")
            for each quality in includeList
                if quality = "auto"
                    continue for
                end if
                pIndex = quality.InStr("p")
                if pIndex <> -1
                    quality = quality.Mid(0, pIndex)
                end if
                qualityFilter[quality] = true
            end for

            return qualityFilter
        end function

    end class

end namespace
