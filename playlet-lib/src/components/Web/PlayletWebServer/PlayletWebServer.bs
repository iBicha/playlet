import "pkg:/components/parts/AutoBind/OnNodeReadyNoOp.bs"
import "pkg:/components/Web/PlayletWebServer/Middleware/BookmarksRouter.bs"
import "pkg:/components/Web/PlayletWebServer/Middleware/CacheRouter.bs"
import "pkg:/components/Web/PlayletWebServer/Middleware/DashRouter.bs"
import "pkg:/components/Web/PlayletWebServer/Middleware/DialRouter.bs"
import "pkg:/components/Web/PlayletWebServer/Middleware/HlsRouter.bs"
import "pkg:/components/Web/PlayletWebServer/Middleware/HomeLayoutRouter.bs"
import "pkg:/components/Web/PlayletWebServer/Middleware/HomeRouter.bs"
import "pkg:/components/Web/PlayletWebServer/Middleware/InvidiousRouter.bs"
import "pkg:/components/Web/PlayletWebServer/Middleware/PlayletInvidiousBackendRouter.bs"
import "pkg:/components/Web/PlayletWebServer/Middleware/PlayletLibUrlsRouter.bs"
import "pkg:/components/Web/PlayletWebServer/Middleware/PreferencesRouter.bs"
import "pkg:/components/Web/PlayletWebServer/Middleware/ProfilesRouter.bs"
import "pkg:/components/Web/PlayletWebServer/Middleware/RegistryRouter.bs"
import "pkg:/components/Web/PlayletWebServer/Middleware/SearchHistoryRouter.bs"
import "pkg:/components/Web/PlayletWebServer/Middleware/StateApiRouter.bs"
import "pkg:/components/Web/PlayletWebServer/Middleware/VideoQueueRouter.bs"
import "pkg:/components/Web/PlayletWebServer/Middleware/ViewRouter.bs"
import "pkg:/components/Web/WebServer/Middleware/CorsMiddleware.bs"
import "pkg:/components/Web/WebServer/Middleware/EtagMiddleware.bs"
import "pkg:/components/Web/WebServer/Middleware/HttpStaticFilesRouter.bs"
import "pkg:/components/Web/WebServer/WebSockets/WebSocketMiddleware.bs"

function Init()
    m.top.packageName = "Playlet"
    m.top.serverName = "Playlet Web Server"
end function

function GetServerAddress(_unused as dynamic) as dynamic
    port = m.top.port
    ip = m.top.applicationInfo@.GetLocalIpAddress()
    if StringUtils.IsNullOrEmpty(ip)
        return invalid
    end if
    return `http://${ip}:${port}`
end function

function SetupRoutes(server as object)
    server.UseRouter(new Http.CorsMiddleware())
    if server.settings.WebSocketsEnabled
        server.UseRouter(new Http.WebSocketMiddleware())
    end if
    server.UseRouter(new Http.HomeRouter())
    server.UseRouter(new Http.StateApiRouter(server))
    server.UseRouter(new Http.DashRouter(server))
    server.UseRouter(new Http.HlsRouter(server))
    server.UseRouter(new Http.PreferencesRouter(server))
    server.UseRouter(new Http.InvidiousRouter(server))
    server.UseRouter(new Http.ProfilesRouter(server))
    server.UseRouter(new Http.VideoQueueRouter(server))
    server.UseRouter(new Http.BookmarksRouter(server))
    server.UseRouter(new Http.HomeLayoutRouter(server))
    server.UseRouter(new Http.ViewRouter(server))
    server.UseRouter(new Http.SearchHistoryRouter(server))
    server.UseRouter(new Http.PlayletLibUrlsRouter(server))
    server.UseRouter(new Http.DialRouter(server))
    server.UseRouter(new Http.CacheRouter())
    server.UseRouter(new Http.RegistryRouter(server))
    server.UseRouter(new Http.PlayletInvidiousBackendRouter())

    etags = new Http.EtagUtils()
    server.UseRouter(new Http.HttpStaticFilesRouter("/", "libpkg:/www", etags, { staticFiles: true, staticCompressed: true }))
    server.UseRouter(new Http.HttpStaticFilesRouter("/config", "libpkg:/config", etags, { staticFiles: true }))
    server.UseRouter(new Http.HttpStaticFilesRouter("/locale", "libpkg:/locale", etags, { staticFiles: true }))
    server.UseRouter(new Http.HttpStaticFilesRouter("/logs", "cachefs:/logs", etags, { fsCheck: true }))

    #if DEBUG
        options = { showDirectories: true, showHidden: true, staticFiles: true }
        server.UseRouter(new Http.HttpStaticFilesRouter("/debug/libpkg", "libpkg:/", etags, options))
        options = { showDirectories: true, showHidden: true, fsCheck: true, staticFiles: true }
        server.UseRouter(new Http.HttpStaticFilesRouter("/debug/pkg", "pkg:/", etags, options))
        options = { showDirectories: true, showHidden: true, fsCheck: true }
        server.UseRouter(new Http.HttpStaticFilesRouter("/debug/tmp", "tmp:/", etags, options))
        options = { showDirectories: true, showHidden: true, fsCheck: true }
        server.UseRouter(new Http.HttpStaticFilesRouter("/debug/cachefs", "cachefs:/", etags, options))
        options = { showDirectories: true, showHidden: true, fsCheck: true, staticFiles: true }
        server.UseRouter(new Http.HttpStaticFilesRouter("/debug/common", "common:/", etags, options))
    #end if
    server.UsePostRouter(new Http.EtagMiddleware(etags))
end function
