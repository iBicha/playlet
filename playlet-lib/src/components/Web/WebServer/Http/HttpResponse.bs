import "pkg:/components/Web/WebServer/Http/HttpConnection.bs"
import "pkg:/components/Web/WebServer/Http/HttpServer.bs"
import "pkg:/components/Web/WebServer/Http/HttpSettings.bs"
import "pkg:/source/utils/Logging.bs"
import "pkg:/source/utils/StringUtils.bs"
import "pkg:/source/utils/TimeUtils.bs"

namespace Http
    function GetHttpResponseId() as integer
        m.http_response_id = ValidInt(m.http_response_id) + 1
        return m.http_response_id
    end function

    class HttpResponse
        ' members
        private body_buffer = invalid
        private header_buffer = invalid
        private path = invalid
        private request = invalid
        private id = 0
        ' copy-initializable members
        private start = 0
        private body_buffer_length = 0
        private sent = 0
        private header_sent = 0
        private header_only = false
        private buf_start = 0
        private http_code = 0

        private server
        private settings

        function new(request as HttpRequest, server as HttpServer, settings as HttpSettings)
            m.id = Http.GetHttpResponseId()
            m.request = request
            m.server = server
            m.settings = settings
            m.body_buffer = CreateObject("roByteArray")
            m.headers = {}
        end function

        function Process(connection as HttpConnection) as boolean
            routers = m.server.routers
            for each router in routers
                if router.OnRequest(m.request, m, connection)
                    exit for
                end if
            end for

            postRouters = m.server.postRouters
            for each router in postRouters
                if router.OnRequest(m.request, m, connection)
                    exit for
                end if
            end for

            return true
        end function

        function Default(errcode as integer, reason as string)
            errname = m.server.utils.HttpTitle(errcode)
            m.http_code = errcode

            buffer = `<html><head><title>${errcode} ${errname}</title></head><body>
<h1>${errname}</h1>
${reason}
<hr>
${m.GeneratedBy()}
</body></html>`

            m.SetBodyDataString(buffer)
            m.ContentType("text/html")
        end function

        function Redirect(where as string, code = 302 as integer)
            m.headers["Location"] = where
            message = `Moved to: <a href="${where}">${where}</a>`
            m.Default(code, message)
        end function

        function Json(data as object)
            m.http_code = 200

            buffer = FormatJson(data)
            m.SetBodyDataString(buffer)
            m.ContentType("application/json")
        end function

        function SetBodyDataBuffer(buffer as object)
            m.body_buffer = buffer
            m.body_buffer_length = m.body_buffer.count()
            m.ContentLength(m.body_buffer_length)
        end function

        function SetBodyDataString(data as string)
            m.body_buffer.fromasciistring(data)
            m.body_buffer_length = m.body_buffer.count()
            m.ContentLength(m.body_buffer_length)
        end function

        function SetBodyDataFile(path as string)
            m.body_buffer.ReadFile(path)
            m.body_buffer_length = m.body_buffer.count()
            m.ContentLength(m.body_buffer_length)
        end function

        function ClearBody(clearContentLength = true as boolean)
            m.body_buffer.clear()
            m.body_buffer_length = 0
            if clearContentLength
                m.ContentLength(0)
            end if
        end function

        function ContentLength(length as integer)
            m.headers["Content-Length"] = Stri(length).trim()
        end function

        function ContentType(mimeType as string)
            m.headers["Content-Type"] = mimeType
        end function

        function Send(sock as object) as integer
            sent = -1
            buf_pos = m.start + m.sent - m.buf_start
            buf_remaining = m.body_buffer.count() - buf_pos
            if buf_remaining = 0
                ' This is expected if there's an ETag cache hit
                LogDebug("source buffer is empty")
            end if
            req_remaining = m.body_buffer_length - m.sent
            if buf_remaining > req_remaining
                buf_remaining = req_remaining
            end if
            sent = sock.send(m.body_buffer, buf_pos, buf_remaining)
            m.LogSentRange(sent, m.buf_start + buf_pos, m.body_buffer_length)
            if sent > 0
                m.sent = m.sent + sent
            end if
            return sent
        end function

        function SendHeader(sock as object) as integer
            if m.header = invalid
                m.GenerateHeader()
            end if

            if m.header_sent = 0
                sent = sock.sendStr(m.header)
            else
                sent = sock.sendStr(m.header.mid(m.header_sent))
            end if
            m.LogSentRange(sent, m.header_sent, m.header_length)
            if sent > 0
                m.header_sent = m.header_sent + sent
            end if
            return sent
        end function

        function GenerateHeader()
            code = m.http_code
            title = m.server.utils.HttpTitle(code)

            m.headers["Date"] = m.Now()
            m.headers["Server"] = m.settings.serverName

            if not m.headers.DoesExist("Connection")
                m.KeepAlive(false)
            end if

            m.header = `HTTP/1.1 ${code} ${title}\r\n`
            for each header in m.headers
                m.header += `${header}: ${m.headers[header]}\r\n`
            end for

            m.header += `\r\n`
            m.header_length = m.header.len()
        end function

        function Done() as boolean
            return m.sent = m.body_buffer_length
        end function

        function DoneHeader() as boolean
            return m.header_sent = m.header_length
        end function

        function LogSentRange(recent as integer, from as integer, total as integer)
            LogDebug(`Sent ${recent} [${m.MakeRange(from, recent, total)}]`)
        end function

        function KeepAlive(keepAlive as boolean)
            if keepAlive
                m.headers["Connection"] = "keep-alive"
                timeout = Int(m.settings.TimeoutInMs / 1000)
                m.headers["Keep-Alive"] = `timeout=${timeout}`
            else
                m.headers["Connection"] = "close"
                m.headers.Delete("Keep-Alive")
            end if
        end function

        function Now() as string
            if m._now = invalid
                m._now = TimeUtils.RFC1123_Date(TimeUtils.Now())
            end if
            return m._now
        end function

        function GeneratedBy() as string
            return `generated by ${m.settings.PackageName} on ${m.Now()}`
        end function

        function MakeRange(start as integer, length as integer, total as integer) as string
            return `${start}-${start + length - 1}/${total}`
        end function

    end class
end namespace
