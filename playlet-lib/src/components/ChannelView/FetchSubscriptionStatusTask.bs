import "pkg:/components/Services/Innertube/InnertubeService.bs"
import "pkg:/components/Services/Invidious/InvidiousService.bs"

@asynctask
function FetchSubscriptionStatusTask(input as object) as object
    channelView = input.channelView
    ucid = input.ucid
    invidiousNode = input.invidious
    authToken = input.authToken

    if m.top.cancel
        return invalid
    end if

    isInnertubeProfile = authToken.profileNode.type = "youtube"
    if isInnertubeProfile
        subscriptionStatus = InnertubeService.GetSubscriptionStatusForChannel(ucid, {
            cancellation: m.top.cancellation
            accessToken: authToken.token
        })

        if subscriptionStatus.error <> invalid
            LogError("Failed to fetch subscription status:", subscriptionStatus.error)
            return invalid
        end if
        channelView.isSubscribed = subscriptionStatus.isSubscribed
    else
        service = new Invidious.InvidiousService(invidiousNode)
        subscriptionsRequest = service.GetSubscriptions(m.top.cancellation)
        if not subscriptionsRequest.IsSuccess()
            error = subscriptionsRequest.ErrorMessage()
            LogError("Failed to fetch subscriptions:", error)
            return invalid
        end if
        subscriptions = subscriptionsRequest.Json()

        isSubscribed = false
        for each subscription in subscriptions
            if subscription.authorId = ucid
                isSubscribed = true
                exit for
            end if
        end for
        channelView.isSubscribed = isSubscribed
    end if

    return invalid
end function
