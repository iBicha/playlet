import "pkg:/components/Services/Innertube/InnertubeService.bs"
import "pkg:/components/Services/Invidious/InvidiousService.bs"
import "pkg:/source/utils/CancellationUtils.bs"

@job("FetchSubscriptionStatusJob")
function ExecuteJob() as void
    input = JobGetInput()

    channelView = input.channelView
    ucid = input.ucid
    invidiousNode = input.invidious
    authToken = input.authToken

    if JobIsCancelled()
        JobCancel()
        return
    end if

    cancellation = JobGetCancellation()
    isInnertubeProfile = authToken.profileNode.type = "youtube"
    if isInnertubeProfile
        subscriptionStatus = InnertubeService.GetSubscriptionStatusForChannel(ucid, {
            cancellation: cancellation
            accessToken: authToken.token
            onBehalfOfUser: authToken.activeIdentifyToken
        })

        if subscriptionStatus.error <> invalid
            JobError("Failed to fetch subscription status: " + ToString(subscriptionStatus.error))
            return
        end if
        channelView.isSubscribed = subscriptionStatus.isSubscribed
    else
        service = new Invidious.InvidiousService(invidiousNode)
        subscriptionsResponse = service.GetSubscriptions(cancellation)
        if not subscriptionsResponse.IsSuccess()
            JobError("Failed to fetch subscriptions: " + subscriptionsResponse.ErrorMessage())
            return
        end if
        subscriptions = subscriptionsResponse.Json()

        isSubscribed = false
        for each subscription in subscriptions
            if subscription.authorId = ucid
                isSubscribed = true
                exit for
            end if
        end for
        channelView.isSubscribed = isSubscribed
    end if
end function
