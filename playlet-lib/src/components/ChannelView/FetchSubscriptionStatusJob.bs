import "pkg:/components/Services/Innertube/InnertubeService.bs"
import "pkg:/components/Services/Invidious/InvidiousService.bs"
import "pkg:/source/utils/CancellationUtils.bs"

@job("FetchSubscriptionStatusJob")
function ExecuteJob() as void
    input = JobGetInput()

    channelView = input.channelView
    ucid = input.ucid
    invidiousNode = input.invidious
    authToken = input.authToken

    if JobIsCancelled()
        JobCancel()
        return
    end if

    cancallation = CancellationUtils.CreateCancellation(JobGetCallbackNode(), "cancel", true)
    isInnertubeProfile = authToken.profileNode.type = "youtube"
    if isInnertubeProfile
        subscriptionStatus = InnertubeService.GetSubscriptionStatusForChannel(ucid, {
            cancellation: cancallation
            accessToken: authToken.token
            onBehalfOfUser: authToken.activeIdentifyToken
        })

        if subscriptionStatus.error <> invalid
            error = "Failed to fetch subscription status: " + ToString(subscriptionStatus.error)
            LogError(error)
            JobError(error)
            return
        end if
        channelView.isSubscribed = subscriptionStatus.isSubscribed
    else
        service = new Invidious.InvidiousService(invidiousNode)
        subscriptionsRequest = service.GetSubscriptions(cancallation)
        if not subscriptionsRequest.IsSuccess()
            error = "Failed to fetch subscriptions: " + subscriptionsRequest.ErrorMessage()
            LogError(error)
            JobError(error)
            return
        end if
        subscriptions = subscriptionsRequest.Json()

        isSubscribed = false
        for each subscription in subscriptions
            if subscription.authorId = ucid
                isSubscribed = true
                exit for
            end if
        end for
        channelView.isSubscribed = isSubscribed
    end if
end function
