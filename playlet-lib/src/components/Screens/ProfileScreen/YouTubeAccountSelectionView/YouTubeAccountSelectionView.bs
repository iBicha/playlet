import "pkg:/components/Dialog/YouTubeLoginAccountItemUtils.bs"
import "pkg:/components/parts/AutoBind/OnNodeReadyNoOp.bs"
import "pkg:/source/utils/FocusManagement.bs"
import "pkg:/source/utils/Logging.bs"
import "pkg:/source/utils/RemoteKeys.bs"
import "pkg:/source/utils/Types.bs"
import "pkg:/source/utils/Locale.bs"

function Init()
    m.accountList = m.top.FindNode("accountList")
    m.accountList.ObserveField("itemSelected", FuncName(OnAccountSelected))
end function

function OnFocusChange() as void
    if not m.top.focus
        return
    end if

    NodeSetFocus(m.accountList, true)
end function

function OnKeyEvent(key as string, press as boolean) as boolean
    if key = RemoteKeys.Options or key = RemoteKeys.Play or key = RemoteKeys.Pause or key = RemoteKeys.PlayOnly
        ' A pass-through to the app controller, so it can toggle picture-in-picture and pause/play
        return false
    end if

    if key = RemoteKeys.Back and press
        Close()
        return true
    end if

    return true
end function

function Close()
    m.top.appController@.PopScreen()
end function

function OnAccountsChanged() as void
    accounts = m.top.accounts
    if not IsArray(accounts) or accounts.Count() = 0
        m.accountList.content = invalid
        LogError(Tr(Locale.Dialogs.NoValidAccountsFound))
        Close()
        return
    end if

    content = CreateObject("roSGNode", "ContentNode")
    accountNodes = []
    for each accountItem in accounts
        if not IsAssociativeArray(accountItem)
            continue for
        end if

        accountNode = CreateObject("roSGNode", "ContentNode")
        accountNode.addField("accountItem", "assocarray", false)
        accountNode.accountItem = accountItem
        accountNodes.Push(accountNode)
    end for

    if accountNodes.Count() = 0
        m.accountList.content = invalid
        LogError(Tr(Locale.Dialogs.NoValidAccountsFound))
        Close()
        return
    end if

    content.appendChildren(accountNodes)
    m.accountList.content = content
end function

function OnAccountSelected(event as object) as void
    itemSelected = m.accountList.itemSelected
    itemNode = m.accountList.content.GetChild(itemSelected)
    if itemNode = invalid
        LogError("Invalid item selected:", itemSelected)
        return
    end if

    accountItem = itemNode.accountItem
    if not IsAssociativeArray(accountItem)
        LogError("Invalid account item selected:", accountItem)
        return
    end if

    accessToken = m.top.accessToken
    if accessToken = invalid or not IsAssociativeArray(accessToken)
        LogError("No valid access token available for YouTube login.")
        return
    end if

    profileNode = YouTubeLoginAccountItemUtils.CreateProfileContentNode(accountItem, accessToken)
    m.top.profilesService@.LoginWithProfile(profileNode)

    Close()
end function
