import "pkg:/components/Dialog/DialogUtils.bs"
import "pkg:/components/VideoFeed/FeedLoadState.bs"
import "pkg:/source/AsyncTask/AsyncTask.bs"
import "pkg:/source/AsyncTask/Tasks.bs"
import "pkg:/source/utils/ErrorUtils.bs"
import "pkg:/source/utils/Locale.bs"
import "pkg:/source/utils/Logging.bs"

function LoadPlaylistPage(invidiousNode as object) as void
    LoadPlaylist(invidiousNode, true)
end function

function LoadPlaylistAll(invidiousNode as object) as void
    LoadPlaylist(invidiousNode, false)
end function

function LoadPlaylist(invidiousNode as object, singlePage as boolean) as void
    if m.contentTask <> invalid
        m.contentTask.cancel = true
        m.contentTask = invalid
        m.top.isLoading = false
    end if

    loadState = m.top.loadState
    if loadState = FeedLoadState.Loading or loadState = FeedLoadState.Loaded
        return
    end if

    m.top.loadState = FeedLoadState.Loading
    m.contentTask = AsyncTask.Start(Tasks.PlaylistContentTask, {
        content: m.top
        invidious: invidiousNode
        singlePage: singlePage
    }, OnPlaylistContentTaskResult)
    m.top.isLoading = true
end function

function OnPlaylistContentTaskResult(output as object) as void
    m.contentTask = invalid
    m.top.isLoading = false

    if output.cancelled
        return
    end if

    if not output.success or not output.result.success
        ' output.error for unhandled exception
        error = output.error
        if error = invalid
            ' output.result.error for network errors
            error = output.result.error
        end if
        error = ErrorUtils.Format(error)
        LogError(error)
        playlistId = output.task.input.content.playlistId
        message = Tr(Locale.Dialogs.FailedToLoadPlaylist).Replace("%1", playlistId) + `\n${error}`
        DialogUtils.ShowDialogEx({
            message: message
            title: Tr(Locale.Dialogs.PlaylistLoadError)
            large: true
        })
    end if
end function
