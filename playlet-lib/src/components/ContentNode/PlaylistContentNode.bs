import "pkg:/components/Dialog/DialogUtils.bs"
import "pkg:/components/JobSystem/Jobs.bs"
import "pkg:/components/JobSystem/JobSystem.bs"
import "pkg:/components/VideoFeed/FeedLoadState.bs"
import "pkg:/source/utils/ErrorUtils.bs"
import "pkg:/source/utils/Locale.bs"
import "pkg:/source/utils/Logging.bs"

function LoadPlaylistPage(invidiousNode as object, jobQueue as object) as void
    LoadPlaylist(invidiousNode, jobQueue, true)
end function

function LoadPlaylistAll(invidiousNode as object, jobQueue as object) as void
    LoadPlaylist(invidiousNode, jobQueue, false)
end function

function LoadPlaylist(invidiousNode as object, jobQueue as object, singlePage as boolean) as void
    loadState = m.top.loadState
    if loadState = FeedLoadState.Loading or loadState = FeedLoadState.Loaded
        return
    end if

    if m.playlistContentJob <> invalid
        m.playlistContentJob.cancel = true
    end if

    m.top.loadState = FeedLoadState.Loading

    input = {
        content: m.top
        invidious: invidiousNode
        singlePage: singlePage
    }

    callback = JobSystem.CreateCallback(OnPlaylistContentJobDone)
    JobSystem.QueueJob(jobQueue, Jobs.PlaylistContentJob, input, callback)
    m.playlistContentJob = callback
end function

function OnPlaylistContentJobDone(event as object) as void
    callback = event.getRoSGNode()
    JobSystem.UnobserveCallback(callback)
    m.playlistContentJob = invalid

    if callback.cancel or callback.success
        return
    end if

    message = Tr(Locale.Dialogs.FailedToLoadPlaylist).Replace("%1", m.top.playlistId) + `\n${callback.error}`
    DialogUtils.ShowDialogEx({
        message: message
        title: Tr(Locale.Dialogs.PlaylistLoadError)
        large: true
    })
end function
